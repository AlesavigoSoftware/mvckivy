#:kivy 2.3.0
#:import dp kivy.metrics.dp

# Общий стиль круглой кнопки
<RoundedTonalIcon@MDIconButton>
    size_hint: None, None
    style: "tonal"
    radius: [self.height / 2, ]
    theme_icon_color: "Custom"
    icon_color: 0, 0, 0, 1

# Экшен SpeedDial с порядком появления
<SpeedDialAction@RoundedTonalIcon>:
    # order берётся из Python-класса SpeedDialAction
    # size/pos/opacity определяются внизу (в экране), тк им нужны биндинги к root (SpeedDial)

<SpeedDial>:
    # Главная кнопка (крупнее), запускает анимацию
    RoundedTonalIcon:
        id: main_btn
        size: root.main_size, root.main_size
        icon: root.root_icon
        x: root.main_x
        y: root.main_y
        on_release: root.toggle()

# -----------------------
# DEMO SCREEN
# -----------------------
MDScreen:
    md_bg_color: app.theme_cls.surfaceColor

    # Прозрачный SpeedDial
    SpeedDial:
        id: sd
        expanded: True
        root_icon: "plus"
        main_size: dp(64)
        action_size: dp(56)
        spacing: dp(12)
        edge_padding: dp(16)
        anchor_x: "right"
        anchor_y: "center"
        stack_direction: "up"

        # Контейнер экшенов, который SD подцепит и вставит в себя
        actions_content: actions_box

        # Важный момент: сам контейнер нулевого размера — каждый ребёнок позиционируется самостоятельно
        Widget:
            id: actions_box
            size_hint: None, None
            size: 0, 0
            # Экшены:
            SpeedDialAction:
                icon: "map-marker-plus"
                # размеры экшена растут 0 -> action_size
                size: (sd.action_size * sd.animation_progress, sd.action_size * sd.animation_progress)
                # появление «из главной»: центрируем на главной и уводим на order*step
                x: sd.main_x + (sd.main_size - self.width) / 2
                y:
                    sd.main_y + (sd.main_size - self.height) / 2 \
                    + (self.order + 1) * (sd.action_size + sd.spacing) \
                    * (1 if sd.stack_direction == "up" else -1) \
                    * sd.animation_progress
                opacity: sd.animation_progress
                on_release: app.on_add_point()

            SpeedDialAction:
                icon: "download"
                size: (sd.action_size * sd.animation_progress, sd.action_size * sd.animation_progress)
                x: sd.main_x + (sd.main_size - self.width) / 2
                y:
                    sd.main_y + (sd.main_size - self.height) / 2 \
                    + (self.order + 1) * (sd.action_size + sd.spacing) \
                    * (1 if sd.stack_direction == "up" else -1) \
                    * sd.animation_progress
                opacity: sd.animation_progress
                on_release: app.on_download()

            SpeedDialAction:
                icon: "chart-bar"
                size: (sd.action_size * sd.animation_progress, sd.action_size * sd.animation_progress)
                x: sd.main_x + (sd.main_size - self.width) / 2
                y:
                    sd.main_y + (sd.main_size - self.height) / 2 \
                    + (self.order + 1) * (sd.action_size + sd.spacing) \
                    * (1 if sd.stack_direction == "up" else -1) \
                    * sd.animation_progress
                opacity: sd.animation_progress
                on_release: app.on_stats()

            SpeedDialAction:
                icon: "pencil"
                size: (sd.action_size * sd.animation_progress, sd.action_size * sd.animation_progress)
                x: sd.main_x + (sd.main_size - self.width) / 2
                y:
                    sd.main_y + (sd.main_size - self.height) / 2 \
                    + (self.order + 1) * (sd.action_size + sd.spacing) \
                    * (1 if sd.stack_direction == "up" else -1) \
                    * sd.animation_progress
                opacity: sd.animation_progress
                on_release: app.on_edit()
