from kivy.app import App
from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
from kivy.properties import AliasProperty, StringProperty, ListProperty
from kivy.clock import Clock
import logging

logging.basicConfig(level=logging.INFO, format="%(message)s")
log = logging.getLogger("demo")

KV = r"""
<LabelBox@BoxLayout>:
    orientation: "vertical"
    spacing: 6
    padding: 6

<BaseBox>:
    # –†–æ–¥–∏—Ç–µ–ª—å: width —á–µ—Ä–µ–∑ –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –∞–ª–∏–∞—Å (size_alias)
    # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è <BaseBox>
    width: int(self.size_alias[0])
    size_hint_x: None
    size_hint_y: None
    height: 80

<ChildBox>:
    # –ü–æ–¥–∫–ª–∞—Å—Å: –ü–û–í–ï–†–• —Ä–æ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º width —á–µ—Ä–µ–∑ –î–ï–¢–°–ö–ò–ô –∞–ª–∏–∞—Å (child_alias)
    # –¢–∞–∫ –º—ã —è–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–∏–∞—Å –≤–º–µ—Å—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ
    

<Root>:
    orientation: "vertical"
    padding: 10
    spacing: 10

    LabelBox:
        # –ù–ï–°–¢–†–û–ì–ò–ô —ç–∫–∑–µ–º–ø–ª—è—Ä: width –±–µ—Ä—ë—Ç—Å—è –∏–∑ child_alias (–ø–æ –ø—Ä–∞–≤–∏–ª—É <ChildBox>)
        ChildBox:
            id: non_strict
            alias_tag: "non_strict"
            width: int(self.child_alias[1])

        # –°–¢–†–û–ì–ò–ô —ç–∫–∑–µ–º–ø–ª—è—Ä: –ø–µ—Ä–µ–±–∏–≤–∞–µ–º –Ω–∞ –º–µ—Å—Ç–µ ‚Äî –±–µ–∑ —Ä–µ–±–∏–Ω–¥–∞ (-width)
        ChildBox:
            id: strict
            alias_tag: "strict"
            -width: int(self.child_alias[1])
"""


class Root(BoxLayout):
    pass


class BaseBox(BoxLayout):
    alias_tag = StringProperty("")  # –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    custom_size = ListProperty([])

    # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∞–ª–∏–∞—Å: size_alias
    def _get_size_alias(self):
        tag = self.alias_tag or self.__class__.__name__
        log.info(
            f"üü† PARENT getter size_alias ‚Üí {self.__class__.__name__}<{tag}> "
            f"{self.size = }, {self.custom_size = }"
        )
        return self.size if not self.custom_size else self.custom_size

    size_alias = AliasProperty(
        _get_size_alias,
        None,
        bind=["size", "custom_size"],
        cache=True,
        watch_before_use=False,
    )


class ChildBox(BaseBox):
    # –î–æ—á–µ—Ä–Ω–∏–π –∞–ª–∏–∞—Å: child_alias (–ø–æ–≤–µ—Ä—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ)
    def _get_child_alias(self):
        tag = self.alias_tag or self.__class__.__name__
        log.info(
            f"üü¢ CHILD  getter child_alias ‚Üí {self.__class__.__name__}<{tag}> "
            f"{self.size = }, {self.custom_size = }"
        )
        return self.custom_size if self.custom_size else self.size

    child_alias = AliasProperty(
        _get_child_alias,
        None,
        bind=["size", "custom_size"],
        cache=True,
        watch_before_use=False,
    )


class DemoApp(App):
    def build(self):
        Builder.load_string(KV)
        root = Root()
        Clock.schedule_once(lambda dt: self._after_build(root), 0)
        return root

    def _after_build(self, root):
        log.info("=== 1) –ú–µ–Ω—è–µ–º size —É –ù–ï–°–¢–†–û–ì–û–ì–û ===")
        root.ids.non_strict.size = (300, 80)
        root.ids.non_strict.custom_size = (150, 70)

        log.info("=== 2) –ú–µ–Ω—è–µ–º size —É –°–¢–†–û–ì–û–ì–û ===")
        root.ids.strict.size = (400, 80)
        root.ids.strict.custom_size = (180, 70)

        log.info("=== –ì–æ—Ç–æ–≤–æ ===")


if __name__ == "__main__":
    DemoApp().run()
