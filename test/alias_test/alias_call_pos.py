from __future__ import annotations
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
from kivy.properties import StringProperty
from kivy.clock import Clock
import logging
from mvckivy.properties.base_classes import ExtendedAliasProperty


logging.basicConfig(level=logging.INFO, format="%(message)s")
log = logging.getLogger("cause-demo")

KV = r"""
<Probe>
    # ¬´–ë—É–¥–∏–º¬ª –∞–ª–∏–∞—Å ‚Äî —à–∏—Ä–∏–Ω–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
    width: int(self.geom_alias[0])
    size_hint_y: None
    height: 80
    padding: 8
    spacing: 8

<Root>
    orientation: "vertical"
    padding: 10
    spacing: 10
    ProbeChild:
        id: a
    ProbeChild:
        id: b
        -width: 260
"""


class Root(BoxLayout):
    pass


class Probe(BoxLayout):
    tag = StringProperty("")

    # –ì–µ—Ç—Ç–µ—Ä —á–∏—Ç–∞–µ—Ç ¬´–ø—Ä–∏—á–∏–Ω—É¬ª —É —Å–∞–º–æ–≥–æ Property: type(self).geom_alias.last_cause(self)
    def _get_geom_alias(self, prop: ExtendedAliasProperty):
        return self._calc_geom_alias(prop)

    def _calc_geom_alias(self, prop: ExtendedAliasProperty):
        pass

    # –ù–ò–ß–ï–ì–û –≤ –∫–ª–∞—Å—Å–µ –Ω–µ –±–∏–Ω–¥–∏–º ‚Äî –≤—Å—ë –¥–µ–ª–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ
    geom_alias = ExtendedAliasProperty(
        _get_geom_alias,
        bind=["size", "x"],  # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–∞–∫ –æ–±—ã—á–Ω–æ
        cache=True,
        watch_before_use=True,
        track_components=True,  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç width/height, x/y
    )


class ProbeChild(Probe):
    def _calc_geom_alias(self, prop: ExtendedAliasProperty):
        # –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
        cause = prop.last_cause(self)
        log.info(
            f"üîé getter geom_alias: cause={cause!r} size={tuple(self.size)} pos={tuple(self.pos)}"
        )
        # –ª—é–±–∞—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞
        return self.size


class DemoApp(App):
    def build(self):
        Builder.load_string(KV)
        root = Root()
        Clock.schedule_once(lambda dt: self._demo(root), 0)
        return root

    def _demo(self, root):
        a, b = root.ids.a, root.ids.b
        log.info("\n=== A.size = (300, 80) ===")
        a.size = (
            300,
            80,
        )  # —É–≤–∏–¥–∏—Ç–µ cause: 'size.width' ‚Üí –∑–∞—Ç–µ–º 'size.height' (–∏–ª–∏ —Å–≤–æ–¥–Ω–æ–µ 'size')
        log.info("\n=== A.x += 40 ===")
        a.x = a.x + 40  # cause: 'pos.x' / 'pos.y' (–∏–ª–∏ 'pos')
        log.info("\n=== B.size = (360, 80) ===")
        b.size = (360, 80)


if __name__ == "__main__":
    DemoApp().run()
