#:import theme_font_styles kivymd.font_definitions.theme_font_styles


<MVCTextField>
    input_filter: self.field_filter
    do_backspace: self.do_backspace
    validators_spec: ["email"]
    validation_mode: "on_focus"

    canvas.before:
        Clear
        # Filled mode.
        Color:
            group: "fill-color"
            rgba: root.fill_rgba
        RoundedRectangle:
            group: "fill-color-rounded-rectangle"
            pos: self.x, self.y
            size: self.width, self.height
            radius: self.radius[0], self.radius[1], 0, 0

        # Active indicator.
        Color:
            group: "active-indicator-color"
            rgba: root.active_rgba
        Line:
            width: self._indicator_height
            points: root.indicator_points

        # Helper text texture.
        Color:
            group: "helper-text-color"
        Rectangle:
            texture: self._helper_text_label.texture if self._helper_text_label else None
            size: root.helper_size
            pos: root.helper_pos

        # Leading icon texture.
        Color:
            group: "leading-icons-color"
        Rectangle:
            texture: self._leading_icon.texture if self._leading_icon else None
            size: root.leading_size
            pos: root.leading_pos

        # Trailing icon texture.
        Color:
            group: "trailing-icons-color"
        Rectangle:
            texture:
                self._trailing_icon.texture if self._trailing_icon else None
            size: root.trailing_size
            pos: root.trailing_pos

        # Max length texture.
        Color:
            group: "max-length-color"
        Rectangle:
            group: "max-length-rect"
            texture:
                self._max_length_label.texture \
                if self._max_length_label else \
                None
            size: root.maxlen_size
            pos: root.maxlen_pos

        # Cursor blink.
        Color:
            rgba: root.cursor_rgba
        Rectangle:
            group: "rectangle-cursor-blink"
            pos: [int(x) for x in self.cursor_pos]
            size: 1, -self.line_height

        # Outlined mode.
        Color:
            group: "rectangle-color"
            rgba:
                root.outline_rgba

        # Top right corner.
        # ------------------------------------------------------─╮
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.width - self.radius[1], \
                self.y + self.height - self.radius[1], \
                self.radius[1], \
                0, \
                90

        # Bottom corner.
        # -----------------------------------------------------─╯
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.width - self.radius[2], \
                self.y + self.radius[2], \
                -self.radius[2], \
                0, \
                -90

        # Top left corner.
        # ╭─------------------------------------------------------
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.radius[0], \
                self.y + self.height - self.radius[0], \
                -self.radius[0], \
                180, \
                90

        # Bottom left corner.
        # ╰─-----------------------------------------------------
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.radius[3], \
                self.y + self.radius[3], \
                -self.radius[3], \
                0, \
                90

       # Left vertical line.
       # │
       # │
       # ╰─------------------------------------------------------
        SmoothLine:
            width: self._outline_height
            points:
                self.x, \
                self.y + self.radius[3], \
                self.x, \
                self.y + (self.height - self.radius[0])

        # Right vertical line.
        #                                                       │
        #                                                       │
        # -----------------------------------------------------─╯
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self.width, \
                self.y + self.radius[2], \
                self.x + self.width, \
                self.y + (self.height - self.radius[1])

        # Bottom horizontal line.
        # ——————————————————————————————————————————————————————─╯
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self.radius[3], \
                self.y, \
                self.x + self.width - self.radius[2], \
                self.y

        # Top (left) part of the line.
        # ╭─-----------------------------------------------------
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self.radius[0], \
                self.y + self.height, \
                self.x + self._left_x_axis_pos, \
                self.y + self.height

        # Top (right) part of the line.
        # ╭─-----------—————————————————————————————————————————─╮
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self._right_x_axis_pos, \
                self.y + self.height, \
                self.x + self.width - self.radius[1], \
                self.y + self.height

        # Text color.
        Color:
            group: "text-color"
            rgba: root.text_rgba

    # Hint texture.
    canvas.after:
        Color:
            group: "hint-text-color"
        Rectangle:
            group: "hint-text-rectangle"
            texture:
                self._hint_text_label.texture \
                if self._hint_text_label else \
                None
            size: root.hint_size
            pos: root.hint_pos

    bold: False
    padding: root.padding_tuple
    multiline: False
    size_hint_y: None
    height: dp(56) if not self.multiline else (dp(10) + self.minimum_height)


<BaseTextFieldIcon>
    size_hint: None, None
    size: dp(20), dp(20)
    size_hint_x: None
    width: self.texture_size[0]
    theme_text_color: "Custom"


<MDTextFieldHintText>
    role: "large"
    theme_font_size: "Custom"


<BaseTextFieldLabel>
    size_hint_x: None
    width: self.texture_size[0]
    adaptive_width: True
    shorten: True
    shorten_from: "right"
    font_style: "Body"
    role: "small"
    theme_text_color: "Custom"
