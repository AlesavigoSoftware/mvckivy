<MKVList>
    cols: 1
    adaptive_height: True
    padding: self.alias_padding


<MKVBaseListItem>
    size_hint_y: None
    spacing: self.alias_spacing
    md_bg_color: self.alias_md_bg_color
    padding: self.alias_padding
    height: self.alias_height


<MKVListItem>
#    orientation: "vertical"
    orientation: "horizontal"
    leading_container: leading_container
    text_container: text_container
    trailing_container: trailing_container
#    h_divider: h_divider
    canvas.after:
        Color:
            rgba:
                ( \
                ( \
                self.theme_cls.surfaceVariantColor \
                if not self.disabled else \
                self.theme_cls.onSurfaceColor \
                ) \
                if self.theme_divider_color == "Primary" else \
                self.divider_color
                ) \

                if root.use_divider else self.theme_cls.transparentColor
        Line:
            id: h_divider
            width: 1
            points: self.x ,self.y, self.x + self.width, self.y

#    BoxLayout:
#        orientation: "horizontal"
#        size_hint: 1, 1
#        padding: 0, 0, 0, 0
#        spacing: 0

    BoxLayout:
        id: leading_container
        size_hint_x: None
        width: 0

    AnchorLayout:
        anchor_y: "center"

        BoxLayout:
            id: text_container
            orientation: "vertical"
            size_hint_y: None
            height: self.minimum_height
            spacing: dp(2)

    BoxLayout:
        id: trailing_container
        size_hint_x: None
        width: 0

#    MDDivider:
#        id: h_divider
#        orientation: "horizontal"
#        size_hint: 1, None
#        height: 0.1
#        padding: 0, 0, 0, 0
#        spacing: 0


<MKVBaseListItemIcon>
    size_hint: None, None
    size: dp(24), dp(24)
    text_color:
        ( \
        self.theme_cls.onSurfaceVariantColor \
        if self.theme_icon_color == "Primary" else \
        ( \
        self.icon_color \
        if self.icon_color else \
        self.theme_cls.transparentColor \
        ) \
        ) \
        if not self.disabled else self.disabled_color
    disabled_color:
        self.theme_cls.onSurfaceColor[:-1] + \
        [self.icon_button_standard_opacity_value_disabled_icon] \
        if not self.icon_color_disabled else self.icon_color_disabled


<MKVListItemTrailingSupportingText>
    adaptive_width: True
    font_style: "Label"
    role: "small"


<MKVListItemLeadingAvatar>
    size_hint: None, None
    size: "40dp", "40dp"
    radius: self.height / 2
    md_bg_color:
        self.theme_cls.primaryContainerColor \
        if not self.disabled else \
        self.theme_cls.onSurfaceColor[:-1] \
        + ( \
        [self._list_item.list_opacity_value_disabled_leading_avatar] \
        if self._list_item else [0] \
        )


<MKVBaseListItemText>
    adaptive_height: True
    markup: True
    shorten_from: "right"
    font_style: "Body"
    role: "medium"
    shorten: True
    text_color:
        self.theme_cls.onSurfaceVariantColor \
        if root.theme_text_color == "Primary" else \
        ( \
        root.text_color \
        if root.text_color else \
        self.theme_cls.onSurfaceVariantColor \
        )


<MKVListItemHeadlineText>
    font_style: "Body"
    role: "large"
    bold: True
    # FIXME: `RecursionError: maximum recursion depth exceeded while calling
    #  a Python object` when use `text_color` property.
    -text_color: self.theme_cls.onSurfaceColor if root.theme_text_color == "Primary" else (root.text_color if root.text_color else self.theme_cls.onSurfaceColor)
